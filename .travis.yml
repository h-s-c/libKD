language: c
script: python ci-tools/run_ctest.py

_linux_focal_template: &linux_focal_template
  os: linux
  dist: focal

_linux_focal_apt_template: &linux_focal_apt_template
  apt:
    sources: 
      - sourceline: "ppa:ubuntu-toolchain-r/test"
      - sourceline: "deb https://apt.kitware.com/ubuntu/ focal main"
        key_url: "https://apt.kitware.com/keys/kitware-archive-latest.asc"
      - sourceline: "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-11 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-9 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://files.viva64.com/deb/ viva64-release pvs-studio"
        key_url: "https://files.viva64.com/etc/pubkey.txt"
      - sourceline: 'deb https://apt.repos.intel.com/oneapi all main'
        key_url: 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB'
    packages: ['cmake', 'ninja-build', 'cppcheck', 'flawfinder', 'binutils-gold', 'pvs-studio', 
               'libgl1-mesa-dev', 'libegl1-mesa-dev', 'libgles2-mesa-dev', 'libx11-dev', 'libwayland-dev',
               'libxcb1-dev', 'libxcb-xkb-dev', 'libxkbcommon-dev', 'libxkbcommon-x11-dev',
               'libxcb-ewmh-dev', 'libxcb-icccm4-dev', 'libxcb-randr0-dev', 'libxcb-util0-dev']

_linux_bionic_template: &linux_bionic_template
  os: linux
  dist: bionic

_linux_bionic_apt_template: &linux_bionic_apt_template
  apt:
    sources: 
      - sourceline: "ppa:ubuntu-toolchain-r/test"
      - sourceline: "deb https://apt.kitware.com/ubuntu/ bionic main"
        key_url: "https://apt.kitware.com/keys/kitware-archive-latest.asc"
      - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-8 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-7 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-6.0 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-5.0 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://files.viva64.com/deb/ viva64-release pvs-studio"
        key_url: "https://files.viva64.com/etc/pubkey.txt"
      - sourceline: 'deb https://apt.repos.intel.com/oneapi all main'
        key_url: 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB'
    packages: ['cmake', 'ninja-build', 'cppcheck', 'flawfinder', 'binutils-gold', 'pvs-studio', 
               'libgl1-mesa-dev', 'libegl1-mesa-dev', 'libgles2-mesa-dev', 'libx11-dev', 'libwayland-dev',
               'libxcb1-dev', 'libxcb-xkb-dev', 'libxkbcommon-dev', 'libxkbcommon-x11-dev',
               'libxcb-ewmh-dev', 'libxcb-icccm4-dev', 'libxcb-randr0-dev', 'libxcb-util0-dev']


_linux_xenial_template: &linux_xenial_template
  os: linux
  dist: xenial

_linux_xenial_apt_template: &linux_xenial_apt_template
  apt:
    sources: 
      - sourceline: "ppa:ubuntu-toolchain-r/test"
      - sourceline: "deb https://apt.kitware.com/ubuntu/ xenial main"
        key_url: "https://apt.kitware.com/keys/kitware-archive-latest.asc"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-4.0 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.8 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://files.viva64.com/deb/ viva64-release pvs-studio"
        key_url: "https://files.viva64.com/etc/pubkey.txt"
      - sourceline: 'deb https://apt.repos.intel.com/oneapi all main'
        key_url: 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB'
    packages: ['cmake', 'ninja-build', 'cppcheck', 'flawfinder', 'binutils-gold', 'pvs-studio', 
               'libgl1-mesa-dev', 'libegl1-mesa-dev', 'libgles2-mesa-dev', 'libx11-dev', 'libwayland-dev',
               'libxcb1-dev', 'libxcb-xkb-dev', 'libxkbcommon-dev', 'libxkbcommon-x11-dev',
               'libxcb-ewmh-dev', 'libxcb-icccm4-dev', 'libxcb-randr0-dev', 'libxcb-util0-dev']

_docker_template: &docker_template
  <<: *linux_focal_template
  services: docker
  cache:
    directories:
      - 'ci-tools/cache'
  install: python ci-tools/install_cmake.py
  before_install: docker pull $DOCKER_IMAGE;
  script: docker run -e CI -e TRAVIS -v `pwd`:/build:rw -w /build $DOCKER_IMAGE /bin/bash -c "python ci-tools/run_ctest.py"

_packagecloud_ubuntu_template: &packagecloud_ubuntu_template
  <<: *docker_template
  before_install: docker pull $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION;
  script:
    - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
        apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
          libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
          libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
        python ci-tools/run_cpack.py;"
  deploy:
    provider: packagecloud
    dist: "$DOCKER_IMAGE/$DOCKER_IMAGE_VERSION"
    repository: "libKD"
    username: "h-s-c"
    token:
      secure: "q55rWSAf5bU/WpC0l8SVS/F0UvGLvFBmn7TVZJ922Yz2nTswxojib9eFhbEds63LprN3/G1kE7VnUE/GygEpbw/z3shWnZIsymWfK18VwLIJZlcOUEyaFrmJwBbN742lkPxENObQjYrSuOSEA46ztcurXyRVsCTIzYvcbdveLW4="
    on:
      tags: true
    package_glob: "*.deb"

_packagecloud_fedora_template: &packagecloud_fedora_template
  <<: *docker_template
  before_install: docker pull $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION;
  script:
    - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "dnf -y update &&
        dnf -y groupinstall \"C Development Tools and Libraries\" && 
        dnf -y install git pkgconfig rpm-build ninja-build python 
          mesa-libGL-devel mesa-libEGL-devel mesa-libGLES-devel libX11-devel wayland-devel mesa-libwayland-egl-devel 
          libxcb-devel libxkbcommon-devel libxkbcommon-x11-devel xcb-util-wm-devel xcb-util-devel;
        python ci-tools/run_cpack.py;"
  deploy:
    provider: packagecloud
    dist: "$DOCKER_IMAGE/$DOCKER_IMAGE_VERSION"
    repository: "libKD"
    username: "h-s-c"
    token:
      secure: "q55rWSAf5bU/WpC0l8SVS/F0UvGLvFBmn7TVZJ922Yz2nTswxojib9eFhbEds63LprN3/G1kE7VnUE/GygEpbw/z3shWnZIsymWfK18VwLIJZlcOUEyaFrmJwBbN742lkPxENObQjYrSuOSEA46ztcurXyRVsCTIzYvcbdveLW4="
    on:
      tags: true
    package_glob: "*.rpm"

_macos_template: &macos_template
  os: osx
  compiler: clang
  before_install: brew update && brew install ninja cppcheck flawfinder

_windows_template: &windows_template
  os: windows
  compiler: cl.exe
  before_install: 
    - choco install -y ninja opencppcoverage cppcheck
    - choco install -y cmake --installargs '"ADD_CMAKE_TO_PATH=User"'

stages:
  - name: 'Testing'
    if: branch = develop
  - name: 'Testing (coverity)'
    if: branch = coverity
  - name: 'Deployment (packagecloud)'
    if: tag IS present

jobs:
  allow_failures:
    - os: windows
    - os: linux
      env: DOCKER_IMAGE=dockcross/web-wasm
  include:
    - stage: 'Testing'
      <<: *linux_focal_template
      addons:
        <<: *linux_focal_apt_template
      compiler: gcc-10
      before_install: sudo apt-get install -y gcc-10

    - <<: *linux_bionic_template
      addons:
        <<: *linux_bionic_apt_template
      compiler: gcc-9
      before_install: sudo apt-get install -y gcc-9

    - <<: *linux_bionic_template
      addons:
        <<: *linux_bionic_apt_template
      compiler: gcc-8
      before_install: sudo apt-get install -y gcc-8

    - <<: *linux_bionic_template
      addons:
        <<: *linux_bionic_apt_template
      compiler: gcc-7
      before_install: sudo apt-get install -y gcc-7

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: gcc-6
      before_install: sudo apt-get install -y gcc-6

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: gcc-5
      before_install: sudo apt-get install -y gcc-5

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: gcc-4.9
      before_install: sudo apt-get install -y gcc-4.9

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: gcc-4.8
      before_install: sudo apt-get install -y gcc-4.8

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: gcc-4.7
      before_install: sudo apt-get install -y gcc-4.7

    - <<: *linux_focal_template
      addons:
        <<: *linux_focal_apt_template
      compiler: clang-11
      before_install: sudo apt-get install -y clang-11 llvm-11

    - <<: *linux_focal_template
      addons:
        <<: *linux_focal_apt_template
      compiler: clang-10
      before_install: sudo apt-get install -y clang-10 llvm-10

    - <<: *linux_focal_template
      addons:
        <<: *linux_focal_apt_template
      compiler: clang-9
      before_install: sudo apt-get install -y clang-9 llvm-9

    - <<: *linux_bionic_template
      addons:
        <<: *linux_bionic_apt_template
      compiler: clang-8
      before_install: sudo apt-get install -y clang-8 llvm-8

    - <<: *linux_bionic_template
      addons:
        <<: *linux_bionic_apt_template
      compiler: clang-7
      before_install: sudo apt-get install -y clang-7 llvm-7

    - <<: *linux_bionic_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: clang-6.0
      before_install: sudo apt-get install -y clang-6.0 llvm-6.0

    - <<: *linux_bionic_template
      addons:
        <<: *linux_bionic_apt_template
      compiler: clang-5.0
      before_install: sudo apt-get install -y clang-5.0 llvm-5.0

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: clang-4.0
      before_install: sudo apt-get install -y clang-4.0 llvm-4.0

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: clang-3.9
      before_install: sudo apt-get install -y clang-3.9 llvm-3.9

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: clang-3.8
      before_install: sudo apt-get install -y clang-3.8 llvm-3.8

    - <<: *linux_xenial_template
      addons:
        <<: *linux_xenial_apt_template
      compiler: icc
      before_install: sudo apt-get install -y intel-oneapi-icc
      before_script: source /opt/intel/oneapi/setvars.sh

    - <<: *docker_template
      env: DOCKER_IMAGE=dockcross/web-wasm

    - <<: *docker_template
      env: DOCKER_IMAGE=dockcross/windows-static-x64

    - <<: *docker_template
      env: DOCKER_IMAGE=dockcross/windows-static-x64-posix

    - <<: *docker_template
      env: DOCKER_IMAGE=dockcross/windows-static-x86

    - <<: *macos_template
      osx_image: xcode12

    - <<: *windows_template
      script: ci-tools/run_ctest_vs2017.cmd

    - stage: 'Testing (coverity)'
      <<: *linux_focal_template
      addons:
        <<: *linux_focal_apt_template
        coverity_scan:
          project:
            name: h-s-c/libKD
          notification_email: kevin.patrick.schmidt@googlemail.com
          build_command_prepend: cmake -S . -B build -G Ninja
          build_command: cmake --build build
          branch_pattern: coverity
      script: true  
      env:
        - secure: "Lo6vQDjM1B/BNAhTSphPCEbKxc7uaxOmg8GE+k94tVj4cZuzwvZb8YN8w6FCaHL/D8Vc+TIVAoBRBEGZ9J+VE02kK86kiN8ftcBevF5rtuDNyc4b7yohfpkdfIAe0IJxN76J5mLlwVvlGMPDkDMyPgwNQdSPQpa+HAvwK/kSOJw="

    - stage: 'Deployment (packagecloud)'
      <<: *packagecloud_ubuntu_template
      env: DOCKER_IMAGE=ubuntu DOCKER_IMAGE_VERSION=focal

    - <<: *packagecloud_ubuntu_template
      env: DOCKER_IMAGE=ubuntu DOCKER_IMAGE_VERSION=bionic

    - <<: *packagecloud_ubuntu_template
      env: DOCKER_IMAGE=ubuntu DOCKER_IMAGE_VERSION=xenial

    - <<: *packagecloud_ubuntu_template
      env: DOCKER_IMAGE=ubuntu DOCKER_IMAGE_VERSION=trusty

    - <<: *packagecloud_ubuntu_template
      env: DOCKER_IMAGE=debian DOCKER_IMAGE_VERSION=bullseye

    - <<: *packagecloud_ubuntu_template
      env: DOCKER_IMAGE=debian DOCKER_IMAGE_VERSION=buster

    - <<: *packagecloud_ubuntu_template
      env: DOCKER_IMAGE=debian DOCKER_IMAGE_VERSION=stretch

    - <<: *packagecloud_fedora_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=34

    - <<: *packagecloud_fedora_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=33

    - <<: *packagecloud_fedora_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=32

    - <<: *packagecloud_fedora_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=31
