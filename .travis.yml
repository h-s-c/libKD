language: c
install: python ci-tools/install_cmake.py   
script: python ci-tools/run_ctest.py

cache:
  directories:
    - 'ci-tools/cache'

linux_template: &linux_template
  os: linux
  dist: xenial
  sudo: required

linux_apt_template: &linux_apt_template
  apt:
    sources: 
      - sourceline: "ppa:ubuntu-toolchain-r/test"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-10 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-6.0 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-4.0 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.8 main"
        key_url: "http://llvm.org/apt/llvm-snapshot.gpg.key"
      - sourceline: "deb http://files.viva64.com/deb/ viva64-release pvs-studio"
        key_url: "https://files.viva64.com/etc/pubkey.txt"
      - sourceline: 'deb https://apt.repos.intel.com/oneapi all main'
        key_url: 'https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB'
    packages: ['ninja-build', 'valgrind', 'cppcheck', 'flawfinder', 'binutils-gold', 'pvs-studio', 
               'libgl1-mesa-dev', 'libegl1-mesa-dev', 'libgles2-mesa-dev', 'libx11-dev', 'libwayland-dev',
               'libxcb1-dev', 'libxcb-xkb-dev', 'libxkbcommon-dev', 'libxkbcommon-x11-dev',
               'libxcb-ewmh-dev', 'libxcb-icccm4-dev', 'libxcb-randr0-dev', 'libxcb-util0-dev']

docker_template: &docker_template
  services: docker
  before_install: docker pull $DOCKER_IMAGE;
  script: docker run -e CI -e TRAVIS -v `pwd`:/build:rw -w /build $DOCKER_IMAGE /bin/bash -c "python ci-tools/run_ctest.py"

packagecloud_deb_template: &packagecloud_deb_template
  before_install: docker pull $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION;
  deploy:
    provider: packagecloud
    dist: "$DOCKER_IMAGE/$DOCKER_IMAGE_VERSION"
    repository: "libKD"
    username: "h-s-c"
    token:
      secure: "q55rWSAf5bU/WpC0l8SVS/F0UvGLvFBmn7TVZJ922Yz2nTswxojib9eFhbEds63LprN3/G1kE7VnUE/GygEpbw/z3shWnZIsymWfK18VwLIJZlcOUEyaFrmJwBbN742lkPxENObQjYrSuOSEA46ztcurXyRVsCTIzYvcbdveLW4="
    skip_cleanup: true
    on:
      tags: true
    package_glob: "*.deb"

packagecloud_rpm_template: &packagecloud_rpm_template
  before_install: docker pull $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION;
  deploy:
    provider: packagecloud
    dist: "$DOCKER_IMAGE/$DOCKER_IMAGE_VERSION"
    repository: "libKD"
    username: "h-s-c"
    token:
      secure: "q55rWSAf5bU/WpC0l8SVS/F0UvGLvFBmn7TVZJ922Yz2nTswxojib9eFhbEds63LprN3/G1kE7VnUE/GygEpbw/z3shWnZIsymWfK18VwLIJZlcOUEyaFrmJwBbN742lkPxENObQjYrSuOSEA46ztcurXyRVsCTIzYvcbdveLW4="
    skip_cleanup: true
    on:
      tags: true
    package_glob: "*.rpm"

macos_template: &macos_template
  os: osx
  compiler: clang
  before_install: brew update && brew install ninja ccache cppcheck flawfinder

windows_template: &windows_template
  os: windows
  compiler: cl.exe
  before_install: choco install -y ninja opencppcoverage cppcheck

stages:
  - name: 'Testing (linux)'
    if: branch = develop
  - name: 'Testing (macos)'
    if: branch = develop
  - name: 'Testing (windows)'
    if: branch = develop
  - name: 'Testing (coverity)'
    if: branch = coverity
  - name: 'Deployment (packagecloud)'
    if: tag IS present

jobs:
  allow_failures:
    - os: windows
    - os: linux
      compiler: clang-5.0
    - os: linux
      env: DOCKER_IMAGE=dockcross/web-wasm
  include:
    - stage: 'Testing (linux)'
      <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-9
      before_install: sudo apt-get install -y gcc-9

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-8
      before_install: sudo apt-get install -y gcc-8

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-7
      before_install: sudo apt-get install -y gcc-7

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-6
      before_install: sudo apt-get install -y gcc-6

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-5
      before_install: sudo apt-get install -y gcc-5

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-4.9
      before_install: sudo apt-get install -y gcc-4.9

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-4.8
      before_install: sudo apt-get install -y gcc-4.8

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: gcc-4.7
      before_install: sudo apt-get install -y gcc-4.7

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-10
      before_install: sudo apt-get install -y clang-10 llvm-10

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-9
      before_install: sudo apt-get install -y clang-9 llvm-9

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-8
      before_install: sudo apt-get install -y clang-8 llvm-8

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-7
      before_install: sudo apt-get install -y clang-7 llvm-7

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-6.0
      before_install: sudo apt-get install -y clang-6.0 llvm-6.0

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-5.0
      before_install: sudo apt-get install -y clang-5.0 llvm-5.0

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-4.0
      before_install: sudo apt-get install -y clang-4.0 llvm-4.0

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-3.9
      before_install: sudo apt-get install -y clang-3.9 llvm-3.9

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: clang-3.8
      before_install: sudo apt-get install -y clang-3.8 llvm-3.8

    - <<: *linux_template
      addons:
        <<: *linux_apt_template
      compiler: icc
      before_install: sudo apt-get install -y intel-oneapi-icc
      before_script: source /opt/intel/inteloneapi/compiler/latest/env/vars.sh

    - <<: *linux_template
      <<: *docker_template
      env: DOCKER_IMAGE=dockcross/windows-x64

    - <<: *linux_template
      <<: *docker_template
      env: DOCKER_IMAGE=dockcross/windows-x64-posix

    - <<: *linux_template
      <<: *docker_template
      env: DOCKER_IMAGE=dockcross/windows-x86

    - <<: *linux_template
      <<: *docker_template
      env: DOCKER_IMAGE=dockcross/web-wasm

    - stage: 'Testing (macos)'
      <<: *macos_template
      osx_image: xcode11.3

    - <<: *macos_template
      osx_image: xcode10.3

    - <<: *macos_template
      osx_image: xcode9.4
      before_script: brew install valgrind

    - stage: 'Testing (windows)'
      <<: *windows_template
      script: cmd.exe //C '"C:\Program Files (x86)\Microsoft Visual Studio\2017\BuildTools\VC\Auxiliary\Build\vcvarsall.bat" amd64 && python ci-tools\run_ctest.py'
    
    - stage: 'Testing (coverity)'
      <<: *linux_template
      addons:
        <<: *linux_apt_template
        coverity_scan:
          project:
            name: h-s-c/libKD
          notification_email: kevin.patrick.schmidt@googlemail.com
          build_command_prepend: ci-tools/cmake/bin/cmake -S . -B build -G Ninja
          build_command: ci-tools/cmake/bin/cmake --build build
          branch_pattern: coverity
      script: true  
      env:
        - secure: "Lo6vQDjM1B/BNAhTSphPCEbKxc7uaxOmg8GE+k94tVj4cZuzwvZb8YN8w6FCaHL/D8Vc+TIVAoBRBEGZ9J+VE02kK86kiN8ftcBevF5rtuDNyc4b7yohfpkdfIAe0IJxN76J5mLlwVvlGMPDkDMyPgwNQdSPQpa+HAvwK/kSOJw="

    - stage: 'Deployment (packagecloud)'
      <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_deb_template
      env: DOCKER_IMAGE=ubuntu DOCKER_IMAGE_VERSION=bionic
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
            apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
              libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
              libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_deb_template
      env: DOCKER_IMAGE=ubuntu DOCKER_IMAGE_VERSION=xenial
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
            apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
              libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
              libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_deb_template
      env: DOCKER_IMAGE=ubuntu DOCKER_IMAGE_VERSION=trusty
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
            apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
              libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
              libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_deb_template
      env: DOCKER_IMAGE=debian DOCKER_IMAGE_VERSION=bullseye
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
            apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
              libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
              libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_deb_template
      env: DOCKER_IMAGE=debian DOCKER_IMAGE_VERSION=buster
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
            apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
              libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
              libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_deb_template
      env: DOCKER_IMAGE=debian DOCKER_IMAGE_VERSION=stretch
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
            apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
              libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
              libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_deb_template
      env: DOCKER_IMAGE=debian DOCKER_IMAGE_VERSION=jessie
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "apt-get -qq update &&
            apt-get -qq -y install build-essential git pkg-config dpkg python ninja-build 
              libgl1-mesa-dev libegl1-mesa-dev libgles2-mesa-dev libx11-dev libwayland-dev libxcb1-dev libxcb-xkb-dev libxkbcommon-dev 
              libxkbcommon-x11-dev libxcb-ewmh-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_rpm_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=31
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "dnf -y update &&
            dnf -y groupinstall \"C Development Tools and Libraries\" && 
            dnf -y install git pkgconfig rpm-build ninja-build python 
              mesa-libGL-devel mesa-libEGL-devel mesa-libGLES-devel libX11-devel wayland-devel mesa-libwayland-egl-devel 
              libxcb-devel libxkbcommon-devel libxkbcommon-x11-devel xcb-util-wm-devel xcb-util-devel;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_rpm_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=30
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "dnf -y update &&
            dnf -y groupinstall \"C Development Tools and Libraries\" && 
            dnf -y install git pkgconfig rpm-build ninja-build python 
              mesa-libGL-devel mesa-libEGL-devel mesa-libGLES-devel libX11-devel wayland-devel mesa-libwayland-egl-devel 
              libxcb-devel libxkbcommon-devel libxkbcommon-x11-devel xcb-util-wm-devel xcb-util-devel;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_rpm_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=29
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "dnf -y update &&
            dnf -y groupinstall \"C Development Tools and Libraries\" && 
            dnf -y install git pkgconfig rpm-build ninja-build python 
              mesa-libGL-devel mesa-libEGL-devel mesa-libGLES-devel libX11-devel wayland-devel mesa-libwayland-egl-devel 
              libxcb-devel libxkbcommon-devel libxkbcommon-x11-devel xcb-util-wm-devel xcb-util-devel;
            python ci-tools/run_cpack.py;"

    - <<: *linux_template
      <<: *docker_template
      <<: *packagecloud_rpm_template
      env: DOCKER_IMAGE=fedora DOCKER_IMAGE_VERSION=28
      script:
        - docker run -v `pwd`:/build:rw -w /build $DOCKER_IMAGE:$DOCKER_IMAGE_VERSION /bin/bash -c "dnf -y update &&
            dnf -y groupinstall \"C Development Tools and Libraries\" && 
            dnf -y install git pkgconfig rpm-build ninja-build python 
              mesa-libGL-devel mesa-libEGL-devel mesa-libGLES-devel libX11-devel wayland-devel mesa-libwayland-egl-devel 
              libxcb-devel libxkbcommon-devel libxkbcommon-x11-devel xcb-util-wm-devel xcb-util-devel;
            python ci-tools/run_cpack.py;"
